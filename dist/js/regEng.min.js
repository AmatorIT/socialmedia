var regName=document.getElementById("name"),regUsername=document.getElementById("username"),regEmail=document.getElementById("email1"),regPass1=document.getElementById("password1"),regPass2=document.getElementById("password2"),regBtn=document.querySelector(".registration__btn"),regCheckBox=document.querySelector(".registration__checkbox"),checkBoxError=document.querySelector(".checkBox__error"),date=document.querySelector(".date"),showError=function(e,r){e=e.parentElement;e.classList.add("error"),e.querySelector(".registration__error").textContent=r},clearError=function(e){e.parentElement.classList.remove("error")},checkForm=function(e){e.forEach(function(e){""==e.value?showError(e,"".concat(e.parentElement.lastChild.previousElementSibling.textContent)):clearError(e)})},checkLength=function(e,r){e.value.length<r&&showError(e,"".concat(e.nextElementSibling.textContent.slice(0,-1)," must consist of ").concat(r," characters"))},checkPass=function(e,r){e.value!==r.value&&showError(r,"Passwords don't match")},checkEmail=function(e){""==e.value?checkForm(e):/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|.(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,3}))$/.test(e.value)||showError(e,"The email address provided is incorrect")},logIn=function(e){e.preventDefault(),checkForm([regName,regUsername,regEmail,regPass1,regPass2]),checkLength(regName,3),checkLength(regPass1,10),checkEmail(regEmail),checkPass(regPass1,regPass2),confirmCheckBox()},confirmCheckBox=function(){!1!==regCheckBox.checked?checkBoxError.classList.remove("error-active"):checkBoxError.classList.add("error-active")},appDate=([regName,regUsername,regEmail,regPass1,regPass2].forEach(function(e){return e.addEventListener("keyup",function(){e.parentElement.classList.remove("error")})}),function(){var e=(new Date).getFullYear();date.textContent=e});regCheckBox.addEventListener("click",confirmCheckBox),regBtn.addEventListener("click",logIn),appDate();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlZ0VuZy5qcyJdLCJuYW1lcyI6WyJyZWdOYW1lIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInJlZ1VzZXJuYW1lIiwicmVnRW1haWwiLCJyZWdQYXNzMSIsInJlZ1Bhc3MyIiwicmVnQnRuIiwicXVlcnlTZWxlY3RvciIsImNoZWNrQm94RXJyb3IiLCJzaG93RXJyb3IiLCJpbnB1dCIsImVycm9yIiwicGFyZW50RWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsInRleHRDb250ZW50IiwibXNnIiwiY2xlYXJFcnJvciIsInJlbW92ZSIsImNoZWNrRm9ybSIsIml0ZW0iLCJ2YWx1ZSIsImNvbmNhdCIsImxhc3RDaGlsZCIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJjaGVja0xlbmd0aCIsImNoZWNrUGFzcyIsImxlbmd0aCIsInBhc3MyIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwic2xpY2UiLCJtaW4iLCJyZWciLCJwYXNzMSIsImVtYWlsIiwiY2hlY2tFbWFpbCIsImxvZ0luIiwiZSIsInByZXZlbnREZWZhdWx0IiwiY29uZmlybUNoZWNrQm94IiwicmVnQ2hlY2tCb3giLCJjaGVja2VkIiwiZ2V0RnVsbFllYXIiLCJhcHBEYXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImZvckVhY2giLCJuZXdEYXRlIiwiRGF0ZSIsImRhdGUiXSwibWFwcGluZ3MiOiJBQUFBLElBQU1BLFFBQVVDLFNBQVNDLGVBQWUsTUFBTSxFQUN4Q0MsWUFBY0YsU0FBU0MsZUFBZSxVQUFVLEVBRGhERixTQUFVQyxTQUFTQyxlQUFlLFFBQU8sRUFDekNDLFNBQVdGLFNBQVdDLGVBQWUsV0FBVyxFQUNoREUsU0FBV0gsU0FBU0MsZUFBZSxXQUFTLEVBQzVDRyxPQUFXSixTQUFTQyxjQUFjLG9CQUFhLEVBQy9DSSxZQUFXTCxTQUFTQyxjQUFlLHlCQUFZLEVBQy9DSyxjQUFrQkMsU0FBQUEsY0FBYyxrQkFBcUIsRUFFckRDLEtBQUFBLFNBQWdCUixjQUFTTyxPQUFjLEVBSXZDRSxVQUFZLFNBQUFDLEVBQVpELEdBQ0NFLEVBQVFELEVBQU1FLGNBQ3BCRCxFQUFLRSxVQUFVQyxJQUFJLE9BQUMsRUFHWEMsRUFBV1IsY0FBTSxzQkFBQSxFQUUxQlEsWUFBQUMsQ0FBRCxFQUtDQyxXQUFBLFNBQUFQLEdBRWNBLEVBQUdFLGNBQ1pDLFVBQVNLLE9BQUEsT0FBSSxDQUhuQixFQU1HQyxVQUFNLFNBQUFULEdBSFJBLEVBSUVPLFFBQUFBLFNBQUFBLEdBQ0QsSUFBQUcsRUFBQUMsTUFDQVosVUFBQ1csRUFBQSxHQUFBRSxPQUFBRixFQUFBUixjQUFBVyxVQUFBQyx1QkFBQVQsV0FBQSxDQUFBLEVBR0hFLFdBQU1RLENBQWMsQ0FIbkIsQ0FBQyxDQUNGLEVBUU1DLFlBQVksU0FBQWhCLEVBQVpnQixHQUNMaEIsRUFBU1csTUFBTU0sT0FBS0MsR0FMbkJuQixVQU1BQSxFQUFVbUIsR0FBQUEsT0FBS2xCLEVBQUFtQixtQkFBMEJkLFlBQUFlLE1BQUEsRUFBQSxDQUFBLENBQUEsRUFBQSxtQkFBQSxFQUFBUixPQUFBUyxFQUFBLGFBQUEsQ0FBQSxDQUUzQyxFQUVPQyxVQUNMLFNBQUFDLEVBQUFMLEdBRURLLEVBQVNaLFFBQVVPLEVBQUlQLE9BUHRCWixVQVFBVSxFQUFVZSx1QkFBTSxDQU5sQixFQVNDQyxXQUFBLFNBQUFELEdBS2tCLElBQWxCZixFQUFTRSxNQUNUSSxVQUFBQSxDQUFZMUIsRUFKYiwwSkFLYUssS0FBUThCLEVBQUtiLEtBQUEsR0FDekJjLFVBQVVELEVBQUMvQix5Q0FBUyxDQVByQixFQVVDaUMsTUFBQSxTQUFBQyxHQUNEQSxFQUFBQyxlQUFNQyxFQVBMcEIsVUFTQ1gsQ0FBQUEsUUFBY0ssWUFBZ0JWLFNBQUNDLFNBQWVDLFNBQUEsRUFSL0NvQixZQVNLMUIsUUFBQSxDQUFBLEVBUkwwQixZQVNDakIsU0FBY0ssRUFBQUEsRUFSZnNCLFdBVUFoQyxRQUFBLEVBQ0F1QixVQUFBdEIsU0FBQUMsUUFBQSxFQUNDTixnQkFBU0csQ0FUWCxFQVdFa0IsZ0JBQW1CUCxXQUNsQixDQUFBLElBQUEyQixZQUFBQyxRQUNGakMsY0FBQUssVUFBQUssT0FBQSxjQUFBLEVBSUFWLGNBQWdCSyxVQUFVQyxJQUFDNEIsY0FBYSxDQU16Q0YsRUFQTUcsU0FRTnJDLENBQUFBLFFBQU9zQyxZQUFpQnpDLFNBQVNpQyxTQUFNL0IsVUFBQXdDLFFBQUEsU0FBQXpCLEdBQUEsT0FDdkN1QixFQUFBQSxpQkFBUyxRQUFBLFdBZFB2QixFQUFLUixjQUFjQyxVQUFVSyxPQUFPLE9BQU8sQ0FDNUMsQ0FBQyxDQUFDLENBQ0gsRUFHZ0IsV0FDZixJQUFNNEIsR0FBVSxJQUFJQyxNQUFPTCxZQUFZLEVBRXZDTSxLQUFLakMsWUFBYytCLENBRXBCLEdBRUFOLFlBQVlJLGlCQUFpQixRQUFTTCxlQUFlLEVBQ3JEakMsT0FBT3NDLGlCQUFpQixRQUFTUixLQUFLLEVBQ3RDTyxRQUFRIiwiZmlsZSI6InJlZ0VuZy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCByZWdOYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25hbWUnKVxyXG5jb25zdCByZWdVc2VybmFtZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1c2VybmFtZScpXHJcbmNvbnN0IHJlZ0VtYWlsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VtYWlsMScpXHJcbmNvbnN0IHJlZ1Bhc3MxID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Bhc3N3b3JkMScpXHJcbmNvbnN0IHJlZ1Bhc3MyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Bhc3N3b3JkMicpXHJcbmNvbnN0IHJlZ0J0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5yZWdpc3RyYXRpb25fX2J0bicpXHJcbmNvbnN0IHJlZ0NoZWNrQm94ICA9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJlZ2lzdHJhdGlvbl9fY2hlY2tib3gnKVxyXG5jb25zdCBjaGVja0JveEVycm9yID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNoZWNrQm94X19lcnJvcicpXHJcblxyXG5jb25zdCBkYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRhdGUnKVxyXG5cclxuY29uc3Qgc2hvd0Vycm9yID0gKGlucHV0LCBtc2cpID0+IHtcclxuXHRjb25zdCBlcnJvciA9IGlucHV0LnBhcmVudEVsZW1lbnRcclxuXHRlcnJvci5jbGFzc0xpc3QuYWRkKCdlcnJvcicpXHJcblxyXG5cdGNvbnN0IGVycm9yTXNnID0gZXJyb3IucXVlcnlTZWxlY3RvcignLnJlZ2lzdHJhdGlvbl9fZXJyb3InKVxyXG5cdGVycm9yTXNnLnRleHRDb250ZW50ID0gbXNnXHJcblx0XHJcbn1cclxuXHJcbmNvbnN0IGNsZWFyRXJyb3IgPSBpbnB1dCA9PiB7XHJcblx0Y29uc3QgZXJyb3IgPSBpbnB1dC5wYXJlbnRFbGVtZW50XHJcblx0ZXJyb3IuY2xhc3NMaXN0LnJlbW92ZSgnZXJyb3InKVxyXG59XHJcblxyXG5jb25zdCBjaGVja0Zvcm0gPSBpbnB1dCA9PiB7XHJcblx0aW5wdXQuZm9yRWFjaChpdGVtID0+IHtcclxuXHRcdGlmIChpdGVtLnZhbHVlID09ICcnKSB7XHJcblx0XHRcdHNob3dFcnJvcihpdGVtLCBgJHtpdGVtLnBhcmVudEVsZW1lbnQubGFzdENoaWxkLnByZXZpb3VzRWxlbWVudFNpYmxpbmcudGV4dENvbnRlbnR9YClcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGNsZWFyRXJyb3IoaXRlbSlcclxuXHRcdH1cclxuXHR9KVxyXG59XHJcblxyXG5jb25zdCBjaGVja0xlbmd0aCA9IChpbnB1dCwgbWluKSA9PiB7XHJcblx0aWYgKGlucHV0LnZhbHVlLmxlbmd0aCA8IG1pbikge1xyXG5cdFx0c2hvd0Vycm9yKGlucHV0LCBgJHtpbnB1dC5uZXh0RWxlbWVudFNpYmxpbmcudGV4dENvbnRlbnQuc2xpY2UoMCwgLTEpfSBtdXN0IGNvbnNpc3Qgb2YgJHttaW59IGNoYXJhY3RlcnNgKVxyXG5cdH1cclxufVxyXG5cclxuY29uc3QgY2hlY2tQYXNzID0gKHBhc3MxLCBwYXNzMikgPT4ge1xyXG5cdGlmIChwYXNzMS52YWx1ZSAhPT0gcGFzczIudmFsdWUpIHtcclxuXHRcdHNob3dFcnJvcihwYXNzMiwgYFBhc3N3b3JkcyBkb24ndCBtYXRjaGApXHJcblx0fVxyXG59XHJcbmNvbnN0IGNoZWNrRW1haWwgPSBlbWFpbCA9PiB7XHJcblx0Y29uc3QgcmVnID1cclxuXHRcdC9eKChbXjw+KClbXFxdXFxcXC4sOzpcXHNAXCJdKyhcXC5bXjw+KClbXFxdXFxcXC4sOzpcXHNAXCJdKykqKXwuKFwiLitcIikpQCgoXFxbWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcXSl8KChbYS16QS1aXFwtMC05XStcXC4pK1thLXpBLVpdezIsM30pKSQvXHJcblxyXG5cdGlmIChlbWFpbC52YWx1ZSA9PSAnJykge1xyXG5cdFx0Y2hlY2tGb3JtKGVtYWlsKVxyXG5cdH0gZWxzZSBpZiAoIXJlZy50ZXN0KGVtYWlsLnZhbHVlKSkge1xyXG5cdFx0c2hvd0Vycm9yKGVtYWlsLCBgVGhlIGVtYWlsIGFkZHJlc3MgcHJvdmlkZWQgaXMgaW5jb3JyZWN0YClcclxuXHR9XHJcbn1cclxuY29uc3QgbG9nSW4gPSBlID0+IHtcclxuXHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG5cdGNoZWNrRm9ybShbcmVnTmFtZSwgcmVnVXNlcm5hbWUsIHJlZ0VtYWlsLCByZWdQYXNzMSwgcmVnUGFzczJdKVxyXG5cdGNoZWNrTGVuZ3RoKHJlZ05hbWUsIDMpXHJcblx0Y2hlY2tMZW5ndGgocmVnUGFzczEsIDEwKVxyXG5cdGNoZWNrRW1haWwocmVnRW1haWwpXHJcblx0Y2hlY2tQYXNzKHJlZ1Bhc3MxLCByZWdQYXNzMilcclxuXHRjb25maXJtQ2hlY2tCb3goKVxyXG59XHJcbmNvbnN0IGNvbmZpcm1DaGVja0JveCA9ICgpPT57XHJcblx0aWYocmVnQ2hlY2tCb3guY2hlY2tlZCAhPT0gZmFsc2Upe1xyXG5cdFx0Y2hlY2tCb3hFcnJvci5jbGFzc0xpc3QucmVtb3ZlKCdlcnJvci1hY3RpdmUnKVxyXG5cdH1lbHNle1xyXG5cdFx0Y2hlY2tCb3hFcnJvci5jbGFzc0xpc3QuYWRkKCdlcnJvci1hY3RpdmUnKVxyXG5cdFx0XHJcblx0fVxyXG59XHJcbjtbcmVnTmFtZSwgcmVnVXNlcm5hbWUsIHJlZ0VtYWlsLCByZWdQYXNzMSwgcmVnUGFzczJdLmZvckVhY2goaXRlbSA9PlxyXG5cdGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCAoKSA9PiB7XHJcblx0XHRpdGVtLnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnZXJyb3InKVxyXG5cdH0pXHJcbilcclxuXHJcblxyXG5jb25zdCBhcHBEYXRlID0gKCk9PntcclxuXHRjb25zdCBuZXdEYXRlID0gbmV3IERhdGUoKS5nZXRGdWxsWWVhcigpXHJcblxyXG5cdGRhdGUudGV4dENvbnRlbnQgPSBuZXdEYXRlXHJcblx0XHJcbn1cclxuXHJcbnJlZ0NoZWNrQm94LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY29uZmlybUNoZWNrQm94KVxyXG5yZWdCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBsb2dJbilcclxuYXBwRGF0ZSgpIl19
